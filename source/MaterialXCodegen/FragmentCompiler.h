//
// TM & (c) 2021 Lucasfilm Entertainment Company Ltd. and Lucasfilm Ltd.
// All rights reserved. See LICENSE.txt for license.
//

#ifndef MATERIALX_CODEGEN_FRAGMENTCOMPILER_H
#define MATERIALX_CODEGEN_FRAGMENTCOMPILER_H

/// @file FragmentCompiler.h
/// TODO: Docs

#include <MaterialXCodegen/Fragment.h>

namespace MaterialX
{
namespace Codegen
{

/// @class SourceCode
/// Container for source code generated by fragment compilers.
class SourceCode
{
public:
    /// Contructor.
    SourceCode(const Syntax& syntax);

    /// Start a new scope using the given bracket type.
    void beginScope(Syntax::Punctuation punc = Syntax::CURLY_BRACKETS);

    /// End the current scope.
    void endScope(bool semicolon = false, bool newline = true);

    /// Start a new line.
    void beginLine();

    /// End the current line.
    void endLine(bool semicolon = true);

    /// Add a newline character.
    void newLine();

    /// Add a generic code string.
    void addString(const string& str);

    /// Add a line of code, optionally appending a semicolon.
    void addLine(const string& str, bool semicolon = true);

    /// Add a block of code.
    void addBlock(const string& str);

    /// Add a single line code comment.
    void addComment(const string& str);

    /// Add an include file.
    void addInclude(const string& file);

    /// Return the resulting source code.
    const string& asString() const;

private:
    const Syntax& _syntax;
    int _indentations;
    vector<Syntax::Punctuation> _scopes;
    StringSet _includes;
    string _code;
};

/// @class FragmentCompiler
/// Class compiling fragments into functions and shader source code.
class FragmentCompiler : public RtSharedBase<FragmentCompiler>
{
public:
    virtual void compileFunction(Context& context, const Fragment& frag, SourceCode& result);
    virtual void compileFunctionCall(Context& context, const Fragment& frag, SourceCode& result);
    virtual void compileShader(Context& context, const Fragment& frag, SourceCode& result);

    virtual void declareVariable(Context& context, const Fragment::Output& output, bool assignDefault, SourceCode& result);
};

} // namepspace Codegen
} // namepspace MaterialX

#endif
