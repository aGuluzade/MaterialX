//
// TM & (c) 2021 Lucasfilm Entertainment Company Ltd. and Lucasfilm Ltd.
// All rights reserved. See LICENSE.txt for license.
//

#ifndef MATERIALX_CODEGEN_FRAGMENTCOMPILER_H
#define MATERIALX_CODEGEN_FRAGMENTCOMPILER_H

/// @file FragmentCompiler.h
/// TODO: Docs

#include <MaterialXCodegen/Fragment.h>

#include <MaterialXFormat/File.h>

namespace MaterialX
{
namespace Codegen
{

/// @class SourceCode
/// Container for source code generated by fragment compilers.
class SourceCode
{
public:
    /// Contructor.
    SourceCode();

    /// Start a new scope using the given bracket type.
    void beginScope(Syntax::Punctuation punc = Syntax::CURLY_BRACKETS);

    /// End the current scope.
    void endScope(bool semicolon = false, bool newline = true);

    /// Start a new line.
    void beginLine();

    /// End the current line.
    void endLine(bool semicolon = true);

    /// Add a newline character.
    void newLine();

    /// Add a generic code string.
    void addString(const string& str);

    /// Add a line of code, optionally appending a semicolon.
    void addLine(const string& str, bool semicolon = true);

    /// Set the given function as defined in this source code.
    void setDefined(const RtToken& function);

    /// Return true if the given function has been defined in this source code.
    bool isDefined(const RtToken& function) const;

    /// Set the given file as included in this source code.
    void setIncluded(const RtToken& file);

    /// Return true if the given file is set as included in this source code.
    bool isIncluded(const RtToken& file) const;

    /// Return the source code.
    const string& asString() const;

    /// Return the source code.
    string& asString();

private:
    int _indentations;
    vector<Syntax::Punctuation> _scopes;
    RtTokenSet _functions;
    RtTokenSet _includes;
    string _code;
};

/// @class FragmentCompiler
/// Class compiling fragments into functions and shader source code.
class FragmentCompiler : public RtSharedBase<FragmentCompiler>
{
public:
    FragmentCompiler(const Context& context);
    virtual ~FragmentCompiler() {}

    virtual void compileShader(const Fragment::Output& output, SourceCode& result) const = 0;

    virtual void compileFunction(const Fragment& frag, SourceCode& result) const;
    virtual void declareVariable(const Fragment::Port& port, bool assignDefault, SourceCode& result) const;
    virtual void emitBlock(const string& block, SourceCode& result) const;
    virtual void emitInclude(const FilePath& file, SourceCode& result) const;
    virtual void emitVariable(const Fragment::Input& input, SourceCode& result) const;
    virtual void emitFunctionCall(const Fragment& frag, SourceCode& result) const;
    virtual void emitTypeDefinitions(SourceCode& result) const;

protected:
    const Context& _context;
};

} // namespace Codegen
} // namespace MaterialX

#endif
